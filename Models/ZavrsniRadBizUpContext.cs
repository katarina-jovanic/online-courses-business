// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace Zavrsni.Models
{
    public partial class ZavrsniRadBizUpContext : DbContext
    {
        public ZavrsniRadBizUpContext()
        {
        }

        public ZavrsniRadBizUpContext(DbContextOptions<ZavrsniRadBizUpContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
           

            modelBuilder.Entity<Admin>(entity =>
            {
                entity.Property(e => e.AdminID).ValueGeneratedNever();

                entity.Property(e => e.Role).HasDefaultValueSql("('admin')");

                entity.HasOne(d => d.AdminNavigation)
                    .WithOne(p => p.Admin)
                    .HasForeignKey<Admin>(d => d.AdminID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Admin__AdminID__5AEE82B9");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.TeacherID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Courses__Teacher__5441852A");
            });

            modelBuilder.Entity<Purchase>(entity =>
            {
                entity.HasKey(e => new { e.StudentID, e.CourseID })
                    .HasName("PK__Purchase__5E57FD61E76A5EAC");

                entity.HasOne(d => d.Course)
                    .WithMany(p => p.Purchases)
                    .HasForeignKey(d => d.CourseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Purchases__Cours__5812160E");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Purchases)
                    .HasForeignKey(d => d.StudentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Purchases__Stude__571DF1D5");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.StudentID).ValueGeneratedNever();

                entity.Property(e => e.Role).HasDefaultValueSql("('student')");

                entity.HasOne(d => d.StudentNavigation)
                    .WithOne(p => p.Student)
                    .HasForeignKey<Student>(d => d.StudentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Students__Studen__4CA06362");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.Property(e => e.TeacherID).ValueGeneratedNever();

                entity.Property(e => e.NumCoursesCreated).HasComputedColumnSql("([dbo].[GetNumCoursesCreated]([TeacherID]))", false);

                entity.Property(e => e.Role).HasDefaultValueSql("('teacher')");

                entity.HasOne(d => d.TeacherNavigation)
                    .WithOne(p => p.Teacher)
                    .HasForeignKey<Teacher>(d => d.TeacherID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Teachers__Teache__5070F446");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}